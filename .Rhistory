my.var <- function(x)
{
m <- mean(x)
return(sum((x - m) ^ 2) / length(x))
}
my.var(Global_active_power) - var(Global_active_power)
# Update the variance function to make it unbiased.
my.var <- function(x)
{
m <- mean(x)
return(sum((x - m) ^ 2) / (length(x) - 1))
}
my.var(Global_active_power) - var(Global_active_power)
# Check the range predicted by the variance function.
c(mean(Global_active_power) - var(Global_active_power), mean(Global_active_power) + var(Global_active_power))
c(mean(Global_active_power) - var(Global_active_power), mean(Global_active_power) + var(Global_active_power))
range(Global_active_power)
my.sd <- function(x)
{
return(sqrt(my.var(x)))
}
# Test our standard deviation function for correctness.
my.sd(Global_active_power) - sd(Global_active_power)
c(mean(Global_active_power) - sd(Global_active_power), mean(Global_active_power) + sd(Global_active_power))
range(Global_active_power)
c(mean(Global_active_power) - sd(Global_active_power), mean(Global_active_power) + sd(Global_active_power))
c(quantile(Global_active_power, probs = 0.25), quantile(Global_active_power, probs = 0.75))
#Visualize
library('ggplot2')
# Load the data from scratch for purity.
data.file <- file.path('data', '3.csv')
powertable <- read.csv(data.file, header = TRUE, sep = ',')
# Experiment with histograms.
ggplot(powertable, aes(x = realpkwh)) +
geom_histogram(binwidth = 1)
ggplot(powertable, aes(x = realpkwh)) +
geom_histogram(binwidth = 0.01)
ggplot(powertable, aes(x = realpkwh)) +
geom_density()
ggplot(powertable, aes(x = realpkwh, fill = date)) +
geom_density()
ggplot(powertable, aes(x = reactivep, fill = date)) +
geom_density()
# Produce two facets in a single plot to make it easier to see the hidden structure.
ggplot(powertable, aes(x = reactivep, fill = date)) +
geom_density() +
facet_grid(date ~ .)
# Experiment with random numbers from the normal distribution.
m <- 0
s <- 1
ggplot(data.frame(X = rnorm(100000, m, s)), aes(x = X)) +
geom_density()
ggplot(powertable, aes(x = realpkwh, y = reactivep)) +
geom_point()
# Add a smooth shape that relates the two explicitly.
ggplot(powertable, aes(x = realpkwh, y = reactivep)) +
geom_point() +
geom_smooth()
ggplot(powertable[1:20, ], aes(x = realpkwh, y = time)) +
geom_point() +
geom_smooth()
ggplot(powertable[1:2000, ], aes(x = realpkwh, y = time)) +
geom_point() +
geom_smooth()
# Visualize how realpkwhower depends on time and date
ggplot(powertable, aes(x = realpkwh, y = time)) +
geom_point(aes(color = date, alpha = 0.25)) +
scale_alpha(guide = "none") +
scale_color_manual(values = c("16/12/2006" = "black", "17/12/2006" = "gray")) +
theme_bw()
# using bright colors.
ggplot(powertable, aes(x = realpkwh, y = time, color = date)) +
geom_point()
powertable <- transform(powertable,
date1 = ifelse(date == '16/12/2006', 1, 0))
logit.model <- glm(date1 ~ realpkwh + reactivep,
data = powertable,
family = binomial(link = 'logit'))
ggplot(powertable, aes(x = realpkwh, y = time)) +
geom_point(aes(color = date, alpha = 0.25)) +
scale_alpha(guide = "none") +
scale_color_manual(values = c("16/12/2006" = "blue", "17/12/2006" = "red")) +
theme_bw() +
stat_abline(intercept = -coef(logit.model)[1] / coef(logit.model)[2],
slope = - coef(logit.model)[3] / coef(logit.model)[2],
geom = 'abline',
color = 'black')
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(train$realp, type="o", col="blue")
lines(train$realp, type="o", pch=22, lty=2, col="red")
plot(density (train$realp), type="o", col="blue")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$realp), type="o", col="blue")
plot(train$prediction, type="o", pch=22, lty=2, col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$realp), type="o", col="blue")
plot(density(train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$realp), type="o", col="blue")
plot(density (train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$realp), type="o", col="blue")
plot(density (train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$realp), type="o", col="blue")
lines(density (train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$realp), type="o", col="blue")
#plot(density (train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
#plot(density (train$realp), type="o", col="blue")
plot(density (train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
#plot(density (train$realp), type="o", col="blue")
plot(density (train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$realp), type="o", col="blue")
plot(density (train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
lines(density (train$realp), type="o", col="blue")
plot(density (train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot.multi(density (train$prediction), type="o", col="red")
plot.multi(density (train$realp), type="o", col="blue")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot.multi(density (train$prediction), type="o", col="red")
lines(density (train$realp), type="o", pch=22, lty=2,col="blue")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$prediction), type="o", col="red")
lines(density (train$realp), type="o", pch=22, lty=2,col="blue")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$prediction), type="o", col="red")
#lines(density (train$realp), type="o", pch=22, lty=2,col="blue")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$prediction), type="o", col="red")
#lines(density (train$realp), type="o", pch=22, lty=2,col="blue")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$prediction), type="o", col="red")
#lines(density (train$realp), type="o", pch=22, lty=2,col="blue")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$prediction), type="o", col="red")
lines(density (train$realp), type="o",col="blue")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot.multi.dens(list(train$realp,train$prediction))
#plot(density (train$prediction), type="o", col="red")
#lines(density (train$realp), type="o",col="blue")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$realp), type="o",col="blue")
lines(density (train$prediction), type="o", col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(density (train$realp), type="o",col="blue")
lines(density (train$prediction), col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(train$realp, type="o",col="blue")
lines(train$prediction, col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(train$realp, type="o",col="blue")
lines(train$prediction,  pch=22, lty=2,col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(train$realp, type="o",col="blue")
lines(train$prediction,  type="o", pch=22, lty=2,col="red")
plot(train$realp, type="o", col="blue", ylim=c(0,1))
plot(train$realp, type="o", col="blue", ylim=c(0,2))
plot(train$realp, type="o", col="blue", ylim=c(0,4))
plot(train$realp, type="o", col="blue", ylim=c(0,10))
plot(train$realp, type="o", col="blue", ylim=c(0,8))
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(train$realp, type="o", col="blue", ylim=c(0,8))
lines(train$prediction,  type="o", pch=22, lty=2,col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(train$realp, type="o", col="blue", ylim=c(0,8))
lines(train$prediction,  type="o", pch=22, lty=2,col="red")
require("ggplot2")
require("gbm")
require("Metrics")
#Set Working Directory
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
dataDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec\\data'
train <- read.csv(paste0('data3.csv'), header = TRUE, stringsAsFactors = FALSE, na.strings=c("", "NA", "NULL"))
plot(train$realp, type="o", col="blue", ylim=c(0,8))
lines(train$prediction,  type="o", pch=22, lty=2,col="red")
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
library(tm)
file <- "app_table.txt"
mydata = read.table(file)
print (mydata)
# listwise deletion of missing
mydata <- na.omit(mydata)
print (mydata)
# standardize variables
mydata <- scale(mydata)
print (mydata)
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:5) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
setwd("C:\\Users\\Karthik\\Desktop\\infosec")
data.file <- file.path('data3.csv')
powertable <- read.table(data.file, header = TRUE, sep = ',',fill = TRUE)
# Create a numeric vector containing just real power data
Global_active_power <- (as.numeric(as.character(powertable$realpkwh)))
summary(Global_active_power)
min(Global_active_power)
max(Global_active_power)
c(min(Global_active_power), max(Global_active_power))
range(Global_active_power)
quantile(Global_active_power,na.rm=TRUE)
quantile(Global_active_power, probs = seq(0, 1, by = 0.20))
my.var <- function(x)
{
m <- mean(x)
return(sum((x - m) ^ 2) / length(x))
}
my.var(Global_active_power) - var(Global_active_power)
# Update the variance function to make it unbiased.
my.var <- function(x)
{
m <- mean(x)
return(sum((x - m) ^ 2) / (length(x) - 1))
}
my.var(Global_active_power) - var(Global_active_power)
# Check the range predicted by the variance function.
c(mean(Global_active_power) - var(Global_active_power), mean(Global_active_power) + var(Global_active_power))
c(mean(Global_active_power) - var(Global_active_power), mean(Global_active_power) + var(Global_active_power))
range(Global_active_power)
my.sd <- function(x)
{
return(sqrt(my.var(x)))
}
# Test our standard deviation function for correctness.
my.sd(Global_active_power) - sd(Global_active_power)
c(mean(Global_active_power) - sd(Global_active_power), mean(Global_active_power) + sd(Global_active_power))
range(Global_active_power)
c(mean(Global_active_power) - sd(Global_active_power), mean(Global_active_power) + sd(Global_active_power))
c(quantile(Global_active_power, probs = 0.25), quantile(Global_active_power, probs = 0.75))
#Visualize
library('ggplot2')
# Load the data from scratch for purity.
data.file <- file.path('data', '3.csv')
powertable <- read.csv(data.file, header = TRUE, sep = ',')
# Experiment with histograms.
ggplot(powertable, aes(x = realpkwh)) +
geom_histogram(binwidth = 1)
ggplot(powertable, aes(x = realpkwh)) +
geom_histogram(binwidth = 0.01)
ggplot(powertable, aes(x = realpkwh)) +
geom_density()
ggplot(powertable, aes(x = realpkwh, fill = date)) +
geom_density()
ggplot(powertable, aes(x = reactivep, fill = date)) +
geom_density()
# Produce two facets in a single plot to make it easier to see the hidden structure.
ggplot(powertable, aes(x = reactivep, fill = date)) +
geom_density() +
facet_grid(date ~ .)
# Experiment with random numbers from the normal distribution.
m <- 0
s <- 1
ggplot(data.frame(X = rnorm(100000, m, s)), aes(x = X)) +
geom_density()
ggplot(powertable, aes(x = realpkwh, y = reactivep)) +
geom_point()
# Add a smooth shape that relates the two explicitly.
ggplot(powertable, aes(x = realpkwh, y = reactivep)) +
geom_point() +
geom_smooth()
ggplot(powertable[1:20, ], aes(x = realpkwh, y = time)) +
geom_point() +
geom_smooth()
ggplot(powertable[1:2000, ], aes(x = realpkwh, y = time)) +
geom_point() +
geom_smooth()
# Visualize how realpkwhower depends on time and date
ggplot(powertable, aes(x = realpkwh, y = time)) +
geom_point(aes(color = date, alpha = 0.25)) +
scale_alpha(guide = "none") +
scale_color_manual(values = c("16/12/2006" = "black", "17/12/2006" = "gray")) +
theme_bw()
# using bright colors.
ggplot(powertable, aes(x = realpkwh, y = time, color = date)) +
geom_point()
powertable <- transform(powertable,
date1 = ifelse(date == '16/12/2006', 1, 0))
logit.model <- glm(date1 ~ realpkwh + reactivep,
data = powertable,
family = binomial(link = 'logit'))
ggplot(powertable, aes(x = realpkwh, y = time)) +
geom_point(aes(color = date, alpha = 0.25)) +
scale_alpha(guide = "none") +
scale_color_manual(values = c("16/12/2006" = "blue", "17/12/2006" = "red")) +
theme_bw() +
stat_abline(intercept = -coef(logit.model)[1] / coef(logit.model)[2],
slope = - coef(logit.model)[3] / coef(logit.model)[2],
geom = 'abline',
color = 'black')
workingDirectory <- 'C:\\Users\\Karthik\\Desktop\\infosec'
setwd(workingDirectory)
library(tm)
file <- "app_table.txt"
mydata = read.table(file)
print (mydata)
# listwise deletion of missing
mydata <- na.omit(mydata)
print (mydata)
# standardize variables
mydata <- scale(mydata)
print (mydata)
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:5) wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
print (mydata)
plot(1:5, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
# K-Means Cluster Analysis
fit <- kmeans(mydata, 9) # 9 cluster solution
print (mydata)
# get cluster means
aggregate(mydata,by=list(fit$cluster),FUN=mean)
print (mydata)
# append cluster assignment
mydata <- data.frame(mydata, fit$cluster)
print (mydata)
print (fit$cluster)
# Ward Hierarchical Clustering
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
print (mydata)
plot(fit) # display dendogram
groups <- cutree(fit, k=5) # cut tree into 5 clusters
# draw dendogram with red borders around the 5 clusters
rect.hclust(fit, k=9, border="red")
plot(fit)
